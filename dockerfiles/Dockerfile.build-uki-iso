ARG AURORABOOT_IMAGE
FROM ${AURORABOOT_IMAGE} AS builder

ARG ARCH
ARG ISO_NAME
ARG CLUSTERCONFIG
ARG EDGE_CUSTOM_CONFIG
ARG AUTO_ENROLL_SECUREBOOT_KEYS
ARG DEBUG
ARG CMDLINE
ARG BRANDING="Palette eXtended Kubernetes Edge"

ENV ISO_NAME=${ISO_NAME}

COPY overlay/files-iso/ /overlay/

COPY --from=validate-user-data /tmp/context /tmp/validate-context
RUN if [ -f /tmp/validate-context/user-data ]; then \
        cp /tmp/validate-context/user-data /overlay/cloud-config.yaml; \
    fi

COPY --from=stylus-image-pack /stylus-image.tar /overlay/stylus-image.tar
COPY --from=third-party-luet /WORKDIR/luet /overlay/luet

ARG EDGE_CUSTOM_CONFIG
RUN if [ -n "$EDGE_CUSTOM_CONFIG" ] && [ -f "$EDGE_CUSTOM_CONFIG" ]; then \
        cp "$EDGE_CUSTOM_CONFIG" /overlay/.edge_custom_config.yaml; \
    fi

RUN mkdir -p /overlay/opt/spectrocloud/content && \
    (cp content-*/*.zst /overlay/opt/spectrocloud/content/ 2>/dev/null || echo "No content files found") && \
    if ls /overlay/opt/spectrocloud/content/*.zst >/dev/null 2>&1; then \
        for file in /overlay/opt/spectrocloud/content/*.zst; do \
            split --bytes=3GB --numeric-suffixes "$file" /overlay/opt/spectrocloud/content/$(basename "$file")_part; \
        done && \
        rm -f /overlay/opt/spectrocloud/content/*.zst; \
    fi

RUN if [ -n "$CLUSTERCONFIG" ] && [ -f "$CLUSTERCONFIG" ]; then \
        cp "$CLUSTERCONFIG" /overlay/opt/spectrocloud/clusterconfig/spc.tgz; \
    fi

RUN if [ -f "local-ui.tar" ]; then \
        cp local-ui.tar /overlay/opt/spectrocloud/ && \
        tar -xf /overlay/opt/spectrocloud/local-ui.tar -C /overlay/opt/spectrocloud && \
        rm -f /overlay/opt/spectrocloud/local-ui.tar; \
    fi

WORKDIR /build

COPY --from=iso-image / /iso-source/

RUN --mount=type=secret,id=enrollment,target=/tmp/enrollment \
    mkdir -p /keys && \
    cp -r /tmp/enrollment/* /keys/

RUN --mount=type=secret,id=private-keys,target=/tmp/private-keys \
    cp -r /tmp/private-keys/* /keys/

RUN --mount=type=secret,id=public-keys,target=/tmp/public-keys \
    cp -r /tmp/public-keys/* /keys/

RUN if [ "$ARCH" = "amd64" ]; then \
        mkdir -p /iso && \
        /usr/bin/auroraboot build-uki \
            --output-type iso \
            --name "${ISO_NAME}" \
            --output-dir /iso \
            --overlay-iso /overlay \
            --keys /keys \
            --boot-branding "${BRANDING}" \
            $([ -n "$CMDLINE" ] && echo "--extend-cmdline \"$CMDLINE\"") \
            $([ "$AUTO_ENROLL_SECUREBOOT_KEYS" = "true" ] && echo "--secure-boot-enroll") \
            $([ "$DEBUG" = "true" ] && echo "--debug") \
            dir:/iso-source; \
    fi

FROM scratch as output
COPY --from=builder /iso/ /