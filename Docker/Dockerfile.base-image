ARG BASE_IMAGE
ARG OS_DISTRIBUTION
ARG OS_VERSION
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG NO_PROXY
ARG PROXY_CERT_PATH

ARG IS_JETSON
ARG IS_UKI
ARG UBUNTU_PRO_KEY
ARG UPDATE_KERNEL
ARG CIS_HARDENING
ARG KAIROS_VERSION
ARG DISABLE_SELINUX
ARG ARCH

FROM base-certs as base-with-certs

COPY . /tmp/build-context
RUN if [ "$IS_JETSON" = "true" ]; then \
        cp /tmp/build-context/cloudconfigs/mount.yaml /system/oem/mount.yaml; \
    fi
RUN if [ "$IS_UKI" = "true" ]; then \
        cp /tmp/build-context/cloudconfigs/80_stylus_uki.yaml /system/oem/80_stylus_uki.yaml; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "ubuntu" ] && [ "$ARCH" = "amd64" ]; then \
        if [ ! -z "$UBUNTU_PRO_KEY" ]; then \
            sed -i '/^[[:space:]]*$/d' /etc/os-release && \
            apt update && apt-get install -y snapd && \
            pro attach $UBUNTU_PRO_KEY; \
        fi && \
        apt-get update && \
        apt-get install --no-install-recommends kbd zstd vim iputils-ping bridge-utils curl tcpdump ethtool rsyslog logrotate -y; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "ubuntu" ] && [ "$ARCH" = "amd64" ]; then \
        if [ "$UPDATE_KERNEL" = "false" ]; then \
            if dpkg -l "linux-image-generic-hwe-$OS_VERSION" > /dev/null 2>&1; then \
                apt-mark hold "linux-image-generic-hwe-$OS_VERSION" "linux-headers-generic-hwe-$OS_VERSION" "linux-generic-hwe-$OS_VERSION"; \
            fi && \
            if dpkg -l linux-image-generic > /dev/null 2>&1; then \
                apt-mark hold linux-image-generic linux-headers-generic linux-generic; \
            fi; \
        fi; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "ubuntu" ] && [ "$ARCH" = "amd64" ] && [ "$IS_UKI" = "false" ]; then \
        APT_UPGRADE_FLAGS="-y"; \
        if [ "$UPDATE_KERNEL" != "false" ]; then \
            APT_UPGRADE_FLAGS="-y --with-new-pkgs"; \
        fi && \
        DEBIAN_FRONTEND=noninteractive apt-get update && \
        apt-get upgrade $APT_UPGRADE_FLAGS && \
        latest_kernel=$(ls /lib/modules | tail -n1 | awk -F '-' '{print $1"-"$2}') && \
        apt-get purge -y $(dpkg -l | awk '/^ii\s+linux-(image|headers|modules)/ {print $2}' | grep -v "${latest_kernel}") && \
        apt-get autoremove -y && \
        rm -rf /var/lib/apt/lists/*; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "ubuntu" ] && [ "$ARCH" = "amd64" ] && [ "$IS_UKI" = "false" ]; then \
        kernel=$(ls /boot/vmlinuz-* | tail -n1) && \
        ln -sf "${kernel#/boot/}" /boot/vmlinuz && \
        kernel=$(ls /lib/modules | tail -n1) && \
        dracut -f "/boot/initrd-${kernel}" "${kernel}" && \
        ln -sf "initrd-${kernel}" /boot/initrd && \
        depmod -a "${kernel}" && \
        if [ ! -f /usr/bin/grub2-editenv ]; then \
            ln -s /usr/sbin/grub-editenv /usr/bin/grub2-editenv; \
        fi; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "ubuntu" ] && [ "$ARCH" = "amd64" ] && [ "$CIS_HARDENING" = "true" ]; then \
        cp /tmp/build-context/cis-harden/harden.sh /tmp/harden.sh && \
        /tmp/harden.sh && rm /tmp/harden.sh; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "ubuntu" ] && [ "$ARCH" = "amd64" ] && [ ! -z "$UBUNTU_PRO_KEY" ]; then \
        pro detach --assume-yes; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "opensuse-leap" ] && [ "$ARCH" = "amd64" ]; then \
        if [ "$UPDATE_KERNEL" = "false" ]; then \
            zypper al kernel-de*; \
        fi && \
        zypper refresh && zypper update -y && \
        if [ -e "/usr/bin/dracut" ]; then \
            kernel=$(ls /lib/modules | tail -n1) && depmod -a "${kernel}" && \
            dracut -f "/boot/initrd-${kernel}" "${kernel}" && ln -sf "initrd-${kernel}" /boot/initrd; \
        fi && \
        zypper install -y zstd vim iputils bridge-utils curl ethtool tcpdump && \
        zypper cc && \
        zypper clean; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "opensuse-leap" ]; then \
        zypper install -y apparmor-parser apparmor-profiles rsyslog logrotate && \
        zypper cc && \
        zypper clean && \
        if [ ! -e /usr/bin/apparmor_parser ]; then \
            cp /sbin/apparmor_parser /usr/bin/apparmor_parser; \
        fi; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "rhel" ]; then \
        yum install -y openssl rsyslog logrotate; \
    fi

RUN if [ "$OS_DISTRIBUTION" = "sles" ]; then \
        if [ ! -e /usr/bin/apparmor_parser ]; then \
            cp /sbin/apparmor_parser /usr/bin/apparmor_parser; \
        fi; \
    fi

COPY --from=os-release /etc/os-release /etc/os-release

RUN rm -rf /var/cache/* && \
    journalctl --vacuum-size=1K && \
    rm -rf /etc/machine-id && \
    rm -rf /var/lib/dbus/machine-id && \
    touch /etc/machine-id && \
    chmod 444 /etc/machine-id && \
    rm /tmp/* -rf

RUN if [ "$DISABLE_SELINUX" = "true" ]; then \
        if grep "security=selinux" /etc/cos/bootargs.cfg > /dev/null 2>&1; then \
            sed -i 's/security=selinux //g' /etc/cos/bootargs.cfg; \
        fi && \
        if grep "selinux=1" /etc/cos/bootargs.cfg > /dev/null 2>&1; then \
            sed -i 's/selinux=1/selinux=0/g' /etc/cos/bootargs.cfg; \
        fi; \
    fi

RUN rm -rf /tmp/build-context